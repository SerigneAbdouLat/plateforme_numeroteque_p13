
function fondrose(){
  var corps=document.body;
  corps.style.backgroundColor="#faa";
};

function ajoute_dans_liste_test(texte){
  var LTest = document.getElementById('ListeTest'); 
  var item = document.createElement('li');
  var txt = document.createTextNode(texte);
  item.appendChild(txt);
  LTest.appendChild(item);
};

function tableau_valeurs_champ(NomChamp){
	var TabChamp = document.getElementsByName(NomChamp);
	ajoute_dans_liste_test(TabChamp.length);
	ajoute_dans_liste_test(JSON.stringify(document.getElementsByName(NomChamp)));
	var TabValeurs = TabChamp.map(function(x){
	    ajoute_dans_liste_test('truc');
//	    return(x.value)
		});
	ajoute_dans_liste_test(TabValeurs.length);
	return [1,2,3];//TabValeurs;
};


function nature_composant(comp){
	// Cas à reconnaître :
	// N : liste de composants nommée
	// X : liste de composants en extension
	// E : entier
	// F : entier et forme
	// I : intervalle
	var reponse = '_'; // ### reconnaître dans le tableau des noms
	                   // Faut-il aussi considére()r que le résultat d'une règle puisse être un composant?
//	if (comp in TabNomsComposants) {reponse = 'N';};
	if (comp.match(/;+/)) {reponse = 'X';};
	if (comp.match(/[^0-9]+/)==null) {reponse = 'E';};
	if (comp.match(/-+/)) {reponse = 'I';};
	if (comp.match(/:+/)) {reponse = 'F';};
	return reponse;	
};

function SépareListeComposants(NumLiCo) {      // Renvoie un tableau contenant les composants
  var input = document.createElement('input'); // de la liste repérée par NumLiCo
  var LiCo = document.getElementById('ComposantListe'+NumLiCo);
  var IdLiCoSep = 'SépareLiCo'+NumLiCo;
  var LiCoSep;
  if (document.getElementById(IdLiCoSep)==null){
    input.setAttribute('type','text');
    input.setAttribute('name','SépareLiCo[]');
    input.setAttribute('id',IdLiCoSep);
    input.setAttribute('value','coucou');
    LiCo.parentNode.appendChild(input);
  };
  LiCoSep=document.getElementById(IdLiCoSep);
  LiCoSep.value = LiCo.value;
  var tComp = LiCo.value.match(/[^;]+/g);
  for (c of tComp){
	  ajoute_dans_liste_test(nature_composant(c)+'> '+c);
	};
  return (tComp);
//  return('Sortir de SépareListeComposants pour '+NumLiCo+' '+LiCo.value+' => '+LiCoSep.value+' '+tComp.length)
};

/*
function TraiteListeComposants(NumLiCo) {
  var input = document.createElement('input');
  var LiCo = document.getElementById('ComposantListe'+NumLiCo);
  var IdLiCoDpl = 'DéploieLiCo'+NumLiCo;
  var LiCoDpl;
  if (document.getElementById(IdLiCoDpl)==null){
    input.setAttribute('type','text');
    input.setAttribute('name','DéploieLiCo[]');
    input.setAttribute('id',IdLiCoDpl);
    input.setAttribute('value','coucou');
    LiCo.parentNode.appendChild(input);
  };
  LiCoDpl=document.getElementById(IdLiCoDpl);
  LiCoDpl.value = LiCo.value;
  var tComp = LiCo.value.match(/[^;]* /g);
  // for (i=0; i<length(tComp); i++){
    // déployé = tComp[i].replace('@1',tcomp1[1]);
	// LiCoDpl.value.replace(tComp[i];déployé);
  // };
	   
  // return (LiCoDpl.value);
  return('Sortir de TraiteListeComposants pour '+NumLiCo+' '+LiCo.value+' => '+LiCoDpl.value+' '+tComp.length)
};
*/

function TraiteLComposant(){
	fondbleu();
	alert("Traite liste composants");
    var PLiCo = document.getElementById('TraiteLComposant1');
    var NumLiCo = document.getElementById('choix-liste-composants').value;
    var séparé = SépareListeComposants(NumLiCo);
	var txt = séparé.length+' composants : ';
    for (c of séparé){
	  txt = txt+' Comp '+c;
	};
	var TabNomsComposants = tableau_valeurs_champ("ComposantId[]");	
//	ajoute_dans_liste_test(TabNomsComposants.length);
//	txt = txt + '; TabNomsComposants  contient '+TabNomsComposants.length+' listes'; 
    var texte = document.createTextNode(" Liste "+NumLiCo+" à traiter: "+txt);
    PLiCo.appendChild(texte);
	
    for (c of TabNomsComposants){
	  ajoute_dans_liste_test(c);
	};
};



function DéploieListeComposants(NumLiCo) {
  var input = document.createElement('input');
  var LiCo = document.getElementById('ComposantListe'+NumLiCo);
  var IdLiCoDpl = 'DéploieLiCo'+NumLiCo;
  var LiCoDpl;
  if (document.getElementById(IdLiCoDpl)==null){
    input.setAttribute('type','text');
    input.setAttribute('name','DéploieLiCo[]');
    input.setAttribute('id',IdLiCoDpl);
    input.setAttribute('value','coucou');
    LiCo.parentNode.appendChild(input);
  };
  LiCoDpl=document.getElementById(IdLiCoDpl);
  LiCoDpl.value = LiCo.value;
  var tComp = LiCo.value.match(/[^;]*/g);
/*  for (i=0; i<length(tComp); i++){
    déployé = tComp[i].replace('@1',tcomp1[1]);
	LiCoDpl.value.replace(tComp[i];déployé);
  };
	   
  return (LiCoDpl.value);*/
  return('Sortir de DéploieListeComposants pour '+NumLiCo+' '+LiCo.value+' => '+LiCoDpl.value+' '+tComp.length)
};

function DeploieLComposant(){
	fondbleu();
	alert("Déploie liste composants");
    var PLiCo = document.getElementById('DeploieLComposant1');
    var NumLiCo = document.getElementById('choix-liste-composants-dpl').value;
    var déployé = DéploieListeComposants(NumLiCo);
    var texte = document.createTextNode(" Liste à déployer: "+NumLiCo+'<br/>'+déployé);
    PLiCo.appendChild(texte);
};

